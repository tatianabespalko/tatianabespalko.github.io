Задание 5: Объектно-ориентированное программирование

Статус задания: Текущее
Среднее время выполнения задания - 24 дня.

/dashboard/user_tasks/8922

Ruby — объекто-ориентированный язык (вообще-то — один из наиболее объектно-ориентированных в мире). Как мы уже видели, всё, с чем приходится сталкиваться (числа, строки, массивы, файлы) — это объект какого-нибудь класса. Пришло время научиться писать свои классы.

Что

Объекты и классы — это, в первую очередь, способ организации кода и взаимодействия между его частями. Написание любой программы на Ruby (кроме, может быть, самых простеньких и одноразовых служебных скриптов) — это всегда придумывание классов («объектно-ориентированная декомпозиция задачи», если тебе хочется умных слов).

К счастью, в нашей задаче пока что довольно понятно, какие должны быть классы и объекты. Осталось их написать!

Задачи

А теперь каждый отдельный фильм у нас пусть хранится в классе Movie, а списком фильмов управляет класс MovieCollection;
Вот что может MovieCollection:
быть созданным по аргументу — имени файла;
выдать список фильмов: all возвращает массив всех фильмов, которые в нём хранятся;
выдать сортированный список фильмов, например movies.sort_by(:date) — возвращает массив фильмов, отсортированных по дате выхода (и так для любого поля);
выдать фильтрованный список фильмов — по некоторым полям, вроде жанра и страны, например movies.filter(genre: 'Comedy') — возвращает массив фильмов с жанром «Comedy»;
выдать статистику по запросу: режиссёр, актёр, год, месяц, страна, жанр — например, movies.stats(:director) возвращает хеш «имя режиссёра → количество фильмов»;
Вот что может Movie:
выдать любое поле, в разумном формате, например, movies.all.first.actors — это будет массив актёров в первом фильме списка;
ответить на запрос has_genre?('Comedy');
Разложим это всё по отдельным файлам — классы каждый в свой, а основную программу, которая демонстрирует их использование — в demo.rb; и сложим это всё в репозиторий на GitHub;
сложнее Вот такое выражение: has_genre?('Tragedy') (когда такой жанр вообще не существует) — должно бросать исключение. А код в основном файле должен его перехватывать и печатать, что за исключение произошло.
Совет: Чтобы красиво выводить списки фильмов и отлаживать всё происходящее — для классов имеет смысл определить методы to_s и inspect — разберись, зачем они нужны и чем помогут.

Ещё совет: чтобы понять, правильно ли работают всякие фильтры и сортировки, можно выводить только первые несколько (скажем .first(5)) фильмов.

Ресурсы

http://ruby-doc.com/docs/ProgrammingRuby/html/tut_classes.html
http://rubylearning.com/satishtalim/writing_our_own_class_in_ruby.html
http://ruby.bastardsbook.com/chapters/oops/
https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)
https://try.github.io
Глава про git в книге "Самообразование веб-разработчика"
Вопросы

Что такое класс?
Что такое объект?
Что такое экземпляр класса?
Что такое переменная экземпляра?
Для чего нужны attr_reader и attr_writer?
Каждое задание ассоциируется с Pull Request на GitHub. Как только вы готовы показать код задания ментору, укажите ссылку на Pull Request в этой форме. После доработки указывать ссылку повторно не нужно, просто нажмите кнопку "На проверку".
